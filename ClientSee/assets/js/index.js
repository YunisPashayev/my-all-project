const slidesDataExample = [
  {
    img: "./assets/Img/sliderImg.jpg",
    title: "–ù–∞—á–∞—Ç—å –ø–æ–∫—É–ø–∫–∏",
    btnText: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å",
  },
  {
    img: "./assets/Img/sliderImg2.jpg",
    title: "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è",
    btnText: "–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ",
  },
  {
    img: "./assets/Img/sliderImg.jpg",
    title: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤–∏–Ω–∫–∏",
    btnText: "–ö—É–ø–∏—Ç—å —Å–µ–π—á–∞—Å",
  },
];

if (!localStorage.getItem("heroSlides")) {
  localStorage.setItem("heroSlides", JSON.stringify(slidesDataExample));
}

const sliderWrapper = document.querySelector(".slider-wrapper");

let slidesData = JSON.parse(localStorage.getItem("heroSlides")) || [];

function createSlide({ img, title, btnText }, isActive = false) {
  const slide = document.createElement("div");
  slide.classList.add("slide");
  if (isActive) slide.classList.add("active");

  slide.innerHTML = `
      <img src="${img}" alt="${title}" />
      <div class="slide-content">
        <h1>${title}</h1>
        <button class="cta-btn">${btnText}</button>
      </div>
    `;
  return slide;
}

sliderWrapper.innerHTML = "";
slidesData.forEach((slideData, index) => {
  sliderWrapper.appendChild(createSlide(slideData, index === 0));
});

const slides = document.querySelectorAll(".slide");
let current = 0;

function showSlide(index) {
  slides.forEach((slide) => slide.classList.remove("active"));
  slides[index].classList.add("active");
}

function nextSlide() {
  current = (current + 1) % slides.length;
  showSlide(current);
}

function prevSlide() {
  current = (current - 1 + slides.length) % slides.length;
  showSlide(current);
}

document.querySelector(".next").addEventListener("click", nextSlide);
document.querySelector(".prev").addEventListener("click", prevSlide);

showSlide(0);
current = 0;

setInterval(nextSlide, 5000);

const defaultCategories = [
  { title: "–û–¥–µ–∂–¥–∞", icon: "üëó" },
  { title: "–û–±—É–≤—å", icon: "üëü" },
  { title: "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", icon: "üì±" },
  { title: "–ü—Ä–æ–¥—É–∫—Ç—ã", icon: "üõí" },
  { title: "–ö–Ω–∏–≥–∏", icon: "üìö" },
  { title: "–ò–≥—Ä—É—à–∫–∏", icon: "üß∏" },
  { title: "–£–∫—Ä–∞—à–µ–Ω–∏—è", icon: "üíç" },
  { title: "–¢–µ—Ö–Ω–∏–∫–∞", icon: "üíª" },
  { title: "–ö–æ—Å–º–µ—Ç–∏–∫–∞", icon: "üíÑ" },
  { title: "–ú–µ–±–µ–ª—å", icon: "üõãÔ∏è" },
  { title: "–ê–≤—Ç–æ—Ç–æ–≤–∞—Ä—ã", icon: "üöó" },
  { title: "–î–æ–º –∏ —Å–∞–¥", icon: "üè°" },
  { title: "–°–ø–æ—Ä—Ç", icon: "üèÄ" },
  { title: "–ó–¥–æ—Ä–æ–≤—å–µ", icon: "ü©∫" },
  { title: "–ú—É–∑—ã–∫–∞", icon: "üéß" },
  { title: "–§–∏–ª—å–º—ã", icon: "üé¨" },
  { title: "–§–æ—Ç–æ", icon: "üì∑" },
  { title: "–ü–æ–¥–∞—Ä–∫–∏", icon: "üéÅ" },
  { title: "–ü–∏—Ç–æ–º—Ü—ã", icon: "üê∂" },
  { title: "–î–µ—Ç—Å–∫–æ–µ", icon: "üçº" },
  { title: "–¢—É—Ä–∏–∑–º", icon: "üèïÔ∏è" },
  { title: "–ö–∞–Ω—Ü—Ç–æ–≤–∞—Ä—ã", icon: "‚úèÔ∏è" },
  { title: "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", icon: "üõ†Ô∏è" },
  { title: "–ò–≥—Ä—ã", icon: "üéÆ" },
  { title: "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã", icon: "üß¢" },
];

if (!localStorage.getItem("categories")) {
  localStorage.setItem("categories", JSON.stringify(defaultCategories));
}

const categories = JSON.parse(localStorage.getItem("categories"));
const slider = document.getElementById("categorySlider");

categories.forEach((cat, i) => {
  const card = document.createElement("div");
  card.className = "category-card";
  card.style.animationDelay = `${i * 0.05}s`;
  card.innerHTML = `
    <div class="icon" style="font-size: 36px">${cat.icon}</div>
    <h3>${cat.title}</h3>
  `;
  slider.appendChild(card);
});

let currentPage = 0;
const cardsPerPage = 5;

function updateSliderPosition() {
  const offset = currentPage * (150 + 20) * cardsPerPage;
  slider.style.transition = "transform 0.6s ease-in-out";
  slider.style.transform = `translateX(-${offset}px)`;
}

document.querySelector(".cat-next").addEventListener("click", () => {
  const maxPage = Math.floor(categories.length / cardsPerPage);
  currentPage = currentPage + 1 >= maxPage ? 0 : currentPage + 1;
  updateSliderPosition();
});

document.querySelector(".cat-prev").addEventListener("click", () => {
  const maxPage = Math.floor(categories.length / cardsPerPage);
  currentPage = currentPage === 0 ? maxPage - 1 : currentPage - 1;
  updateSliderPosition();
});

let wheelTimeout;
const debounceWheel = (callback, delay = 300) => {
  if (wheelTimeout) clearTimeout(wheelTimeout);
  wheelTimeout = setTimeout(callback, delay);
};

document.querySelector(".category-slider-wrapper").addEventListener(
  "wheel",
  (e) => {
    e.preventDefault();

    debounceWheel(() => {
      if (e.deltaY > 0 || e.deltaX > 0) {
        const maxPage = Math.floor(categories.length / cardsPerPage);
        currentPage = currentPage + 1 >= maxPage ? 0 : currentPage + 1;
      } else {
        const maxPage = Math.floor(categories.length / cardsPerPage);
        currentPage = currentPage === 0 ? maxPage - 1 : currentPage - 1;
      }
      updateSliderPosition();
    }, 200);
  },
  { passive: false }
);

const defaultFeatured = [
  {
    title: "–°–º–∞—Ä—Ç-—á–∞—Å—ã",
    label: "üî• New",
    image: "https://images.unsplash.com/photo-1593642532973-d31b6557fa68?w=400",
  },
  {
    title: "–ù–∞—É—à–Ω–∏–∫–∏",
    label: "‚≠ê Top",
    image: "https://images.unsplash.com/photo-1593642532973-d31b6557fa68?w=400",
  },
  {
    title: "–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞",
    label: "üí• Discount",
    image: "https://images.unsplash.com/photo-1593642532973-d31b6557fa68?w=400",
  },
  {
    title: "–§–∏—Ç–Ω–µ—Å-–±—Ä–∞—Å–ª–µ—Ç",
    label: "üî• New",
    image: "https://images.unsplash.com/photo-1593642532973-d31b6557fa68?w=400",
  },
  {
    title: "–≠–ª–µ–∫—Ç—Ä–æ—Å–∞–º–æ–∫–∞—Ç",
    label: "‚≠ê Top",
    image: "https://images.unsplash.com/photo-1593642532973-d31b6557fa68?w=400",
  },
  {
    title: "LED-–ª–∞–º–ø–∞",
    label: "üí• Discount",
    image: "https://images.unsplash.com/photo-1593642532973-d31b6557fa68?w=400",
  },
  {
    title: "–ö–æ—Ñ–µ–≤–∞—Ä–∫–∞",
    label: "üî• New",
    image: "https://images.unsplash.com/photo-1593642532973-d31b6557fa68?w=400",
  },
  {
    title: "–ò–≥—Ä–æ–≤–∞—è –º—ã—à—å",
    label: "‚≠ê Top",
    image: "https://images.unsplash.com/photo-1593642532973-d31b6557fa68?w=400",
  },
  {
    title: "–°–º–∞—Ä—Ç-—á–∞—Å—ã",
    label: "üî• New",
    image: "https://images.unsplash.com/photo-1593642532973-d31b6557fa68?w=400",
  },
  {
    title: "–ù–∞—É—à–Ω–∏–∫–∏",
    label: "‚≠ê Top",
    image: "https://images.unsplash.com/photo-1593642532973-d31b6557fa68?w=400",
  },
  {
    title: "–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞",
    label: "üí• Discount",
    image: "https://images.unsplash.com/photo-1593642532973-d31b6557fa68?w=400",
  },
  {
    title: "–§–∏—Ç–Ω–µ—Å-–±—Ä–∞—Å–ª–µ—Ç",
    label: "üî• New",
    image: "https://images.unsplash.com/photo-1593642532973-d31b6557fa68?w=400",
  },
  {
    title: "–≠–ª–µ–∫—Ç—Ä–æ—Å–∞–º–æ–∫–∞—Ç",
    label: "‚≠ê Top",
    image: "https://images.unsplash.com/photo-1593642532973-d31b6557fa68?w=400",
  },
  {
    title: "LED-–ª–∞–º–ø–∞",
    label: "üí• Discount",
    image: "https://images.unsplash.com/photo-1593642532973-d31b6557fa68?w=400",
  },
  {
    title: "–ö–æ—Ñ–µ–≤–∞—Ä–∫–∞",
    label: "üî• New",
    image: "https://images.unsplash.com/photo-1593642532973-d31b6557fa68?w=400",
  },
  {
    title: "–ò–≥—Ä–æ–≤–∞—è –º—ã—à—å",
    label: "‚≠ê Top",
    image: "https://images.unsplash.com/photo-1593642532973-d31b6557fa68?w=400",
  },
];

if (!localStorage.getItem("featuredProducts")) {
  localStorage.setItem("featuredProducts", JSON.stringify(defaultFeatured));
}

const featured = JSON.parse(localStorage.getItem("featuredProducts"));
const featSlider = document.getElementById("featuredSlider");

featured.forEach((item, i) => {
  const card = document.createElement("div");
  card.className = "featured-card";
  card.style.animationDelay = `${i * 0.05}s`;
  card.innerHTML = `
    <span class="label">${item.label}</span>
    <img src="${item.image}" alt="${item.title}" />
    <h3>${item.title}</h3>
  `;
  featSlider.appendChild(card);
});

let featPage = 0;
const featCardsPerPage = 4;

function updateFeaturedSlider() {
  const offset = featPage * (200 + 20) * featCardsPerPage;
  featSlider.style.transform = `translateX(-${offset}px)`;
}

document.querySelector(".feat-next").addEventListener("click", () => {
  const maxPage = Math.floor(featured.length / featCardsPerPage);
  featPage = featPage + 1 >= maxPage ? 0 : featPage + 1;
  updateFeaturedSlider();
});

document.querySelector(".feat-prev").addEventListener("click", () => {
  const maxPage = Math.floor(featured.length / featCardsPerPage);
  featPage = featPage === 0 ? maxPage - 1 : featPage - 1;
  updateFeaturedSlider();
});

// –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫–æ–ª–µ—Å–æ–º –º—ã—à–∏
let wheelTimeoutProd;
const debounceWheelProd = (callback, delay = 300) => {
  if (wheelTimeoutProd) clearTimeout(wheelTimeoutProd);
  wheelTimeoutProd = setTimeout(callback, delay);
};

document.querySelector(".featured-slider-wrapper").addEventListener(
  "wheel",
  (e) => {
    e.preventDefault();
    debounceWheelProd(() => {
      const maxPage = Math.floor(featured.length / featCardsPerPage);
      if (e.deltaY > 0 || e.deltaX > 0) {
        featPage = featPage + 1 >= maxPage ? 0 : featPage + 1;
      } else {
        featPage = featPage === 0 ? maxPage - 1 : featPage - 1;
      }
      updateFeaturedSlider();
    }, 200);
  },
  { passive: false }
);
